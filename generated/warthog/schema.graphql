interface BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModel implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

type BaseModelUUID implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
}

input BaseWhereInput {
  id_eq: String
  id_in: [String!]
  createdAt_eq: String
  createdAt_lt: String
  createdAt_lte: String
  createdAt_gt: String
  createdAt_gte: String
  createdById_eq: String
  updatedAt_eq: String
  updatedAt_lt: String
  updatedAt_lte: String
  updatedAt_gt: String
  updatedAt_gte: String
  updatedById_eq: String
  deletedAt_all: Boolean
  deletedAt_eq: String
  deletedAt_lt: String
  deletedAt_lte: String
  deletedAt_gt: String
  deletedAt_gte: String
  deletedById_eq: String
}

"""GraphQL representation of BigInt"""
scalar BigInt

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

interface DeleteResponse {
  id: ID!
}

type NftEntity implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  name: String
  instance: String
  transferable: Int
  issuer: String
  sn: String
  metadata: String
  currentOwner: String
  price: BigInt
  burned: Boolean
  blockNumber: BigInt
}

type NftEntityConnection {
  totalCount: Int!
  edges: [NftEntityEdge!]!
  pageInfo: PageInfo!
}

input NftEntityCreateInput {
  name: String
  instance: String
  transferable: Float
  issuer: String
  sn: String
  metadata: String
  currentOwner: String
  price: String
  burned: Boolean
  blockNumber: String
}

type NftEntityEdge {
  node: NftEntity!
  cursor: String!
}

enum NftEntityOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  name_ASC
  name_DESC
  instance_ASC
  instance_DESC
  transferable_ASC
  transferable_DESC
  issuer_ASC
  issuer_DESC
  sn_ASC
  sn_DESC
  metadata_ASC
  metadata_DESC
  currentOwner_ASC
  currentOwner_DESC
  price_ASC
  price_DESC
  burned_ASC
  burned_DESC
  blockNumber_ASC
  blockNumber_DESC
}

input NftEntityUpdateInput {
  name: String
  instance: String
  transferable: Float
  issuer: String
  sn: String
  metadata: String
  currentOwner: String
  price: String
  burned: Boolean
  blockNumber: String
}

input NftEntityWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  name_eq: String
  name_contains: String
  name_startsWith: String
  name_endsWith: String
  name_in: [String!]
  instance_eq: String
  instance_contains: String
  instance_startsWith: String
  instance_endsWith: String
  instance_in: [String!]
  transferable_eq: Int
  transferable_gt: Int
  transferable_gte: Int
  transferable_lt: Int
  transferable_lte: Int
  transferable_in: [Int!]
  issuer_eq: String
  issuer_contains: String
  issuer_startsWith: String
  issuer_endsWith: String
  issuer_in: [String!]
  sn_eq: String
  sn_contains: String
  sn_startsWith: String
  sn_endsWith: String
  sn_in: [String!]
  metadata_eq: String
  metadata_contains: String
  metadata_startsWith: String
  metadata_endsWith: String
  metadata_in: [String!]
  currentOwner_eq: String
  currentOwner_contains: String
  currentOwner_startsWith: String
  currentOwner_endsWith: String
  currentOwner_in: [String!]
  price_eq: BigInt
  price_gt: BigInt
  price_gte: BigInt
  price_lt: BigInt
  price_lte: BigInt
  price_in: [BigInt!]
  burned_eq: Boolean
  burned_in: [Boolean!]
  blockNumber_eq: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  AND: [NftEntityWhereInput!]
  OR: [NftEntityWhereInput!]
}

input NftEntityWhereUniqueInput {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type ProcessorState {
  lastCompleteBlock: Float!
  lastProcessedEvent: String!
  indexerHead: Float!
  chainHead: Float!
}

type Query {
  nftEntities(offset: Int, limit: Int = 50, where: NftEntityWhereInput, orderBy: [NftEntityOrderByInput!]): [NftEntity!]!
  nftEntityByUniqueInput(where: NftEntityWhereUniqueInput!): NftEntity
  nftEntitiesConnection(first: Int, after: String, last: Int, before: String, where: NftEntityWhereInput, orderBy: [NftEntityOrderByInput!]): NftEntityConnection!
  remarkEntities(offset: Int, limit: Int = 50, where: RemarkEntityWhereInput, orderBy: [RemarkEntityOrderByInput!]): [RemarkEntity!]!
  remarkEntityByUniqueInput(where: RemarkEntityWhereUniqueInput!): RemarkEntity
  remarkEntitiesConnection(first: Int, after: String, last: Int, before: String, where: RemarkEntityWhereInput, orderBy: [RemarkEntityOrderByInput!]): RemarkEntityConnection!
}

type RemarkEntity implements BaseGraphQLObject {
  id: ID!
  createdAt: DateTime!
  createdById: String!
  updatedAt: DateTime
  updatedById: String
  deletedAt: DateTime
  deletedById: String
  version: Int!
  value: String!
  caller: String!
  blockNumber: String!
  interaction: String
}

type RemarkEntityConnection {
  totalCount: Int!
  edges: [RemarkEntityEdge!]!
  pageInfo: PageInfo!
}

input RemarkEntityCreateInput {
  value: String!
  caller: String!
  blockNumber: String!
  interaction: String
}

type RemarkEntityEdge {
  node: RemarkEntity!
  cursor: String!
}

enum RemarkEntityOrderByInput {
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  deletedAt_ASC
  deletedAt_DESC
  value_ASC
  value_DESC
  caller_ASC
  caller_DESC
  blockNumber_ASC
  blockNumber_DESC
  interaction_ASC
  interaction_DESC
}

input RemarkEntityUpdateInput {
  value: String
  caller: String
  blockNumber: String
  interaction: String
}

input RemarkEntityWhereInput {
  id_eq: ID
  id_in: [ID!]
  createdAt_eq: DateTime
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdById_eq: ID
  createdById_in: [ID!]
  updatedAt_eq: DateTime
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedById_eq: ID
  updatedById_in: [ID!]
  deletedAt_all: Boolean
  deletedAt_eq: DateTime
  deletedAt_lt: DateTime
  deletedAt_lte: DateTime
  deletedAt_gt: DateTime
  deletedAt_gte: DateTime
  deletedById_eq: ID
  deletedById_in: [ID!]
  value_eq: String
  value_contains: String
  value_startsWith: String
  value_endsWith: String
  value_in: [String!]
  caller_eq: String
  caller_contains: String
  caller_startsWith: String
  caller_endsWith: String
  caller_in: [String!]
  blockNumber_eq: String
  blockNumber_contains: String
  blockNumber_startsWith: String
  blockNumber_endsWith: String
  blockNumber_in: [String!]
  interaction_eq: String
  interaction_contains: String
  interaction_startsWith: String
  interaction_endsWith: String
  interaction_in: [String!]
  AND: [RemarkEntityWhereInput!]
  OR: [RemarkEntityWhereInput!]
}

input RemarkEntityWhereUniqueInput {
  id: ID!
}

type StandardDeleteResponse {
  id: ID!
}

type Subscription {
  stateSubscription: ProcessorState!
}
